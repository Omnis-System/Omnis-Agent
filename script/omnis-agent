#!perl

use strict;
use warnings;
use 5.010;
use utf8;
use Carp;

use Getopt::Long qw(:config posix_default no_ignore_case no_ignore_case_always);
use Pod::Usage;
use Data::Dumper;
BEGIN {
    sub p($) {
        local $Data::Dumper::Indent    = 1;
        local $Data::Dumper::Deepcopy  = 1;
        local $Data::Dumper::Sortkeys  = 1;
        local $Data::Dumper::Terse     = 1;
        local $Data::Dumper::Useqq     = 1;
        local $Data::Dumper::Quotekeys = 0;
        my $d =  Dumper($_[0]);
        $d    =~ s/\\x{([0-9a-z]+)}/chr(hex($1))/ge;
        print STDERR $d;
    }
}

use File::Basename;
use FindBin;
use File::Spec;
use lib map {File::Spec->catfile($FindBin::Bin, @$_)}
    [qw(.. lib)], [qw(.. extra-handler)];

use Data::Validator;
use Log::Minimal;
use Proclet;
use Plack::Builder;
use Plack::Loader;
use Omnis::Agent::Web;
use Omnis::Agent;

my $Debug = 0;

MAIN: {
    my %arg;
    GetOptions(
        \%arg,
        'host|h=s',
        'port|p=s',
        'max-workers=i',
        'config=s',
        'debug|d+' => \$Debug,
        'help|h|?' => sub { pod2usage(-verbose=>1) }) or pod2usage();
    $ENV{LM_DEBUG} = 1 if $Debug;
    state $opt_rule = Data::Validator->new(
        host          => { isa => 'Str', default => '0.0.0.0' },
        port          => { isa => 'Str', default => '4649' },
        'max-workers' => { isa => 'Int', default => 2 },
        config        => { isa => 'Str', optional => 1 },
    )->with('NoThrow','NoRestricted');
    my $opt = $opt_rule->validate(%arg);
    pod2usage(join("\n", map {$_->{message}} @{$opt_rule->clear_errors}))
        if $opt_rule->has_errors;

    debugf("opt: %s", ddf($opt));

    my $proclet = Proclet->new;

    $proclet->service(
        code => sub { run_agent($opt) },
        tag  => 'agent',
    );

    $proclet->run;
    exit 0;
}

sub run_agent {
    my $opt = shift;
    my $app = builder {
        enable 'AccessLog'; # fixme
        enable 'Lint';      # fixme
        enable 'StackTrace', force => 1; # fixme
        enable 'Plack::Middleware::Static',
            path => qr{^(?:/static/)},
                root => File::Spec->catdir(dirname(__FILE__), '..');
        enable 'Plack::Middleware::Static',
            path => qr{^(?:/robots\.txt|/favicon\.ico)$},
                root => File::Spec->catdir(dirname(__FILE__), '..', 'static');
        enable 'Plack::Middleware::ReverseProxy';

        Omnis::Agent::Web->to_app();
    };
#    unless (caller) {
        my $host        = $opt->{host};
        my $port        = $opt->{port};
        my $config_file = $opt->{config};

        if ($config_file) {
            my $config = do $config_file;
            Carp::croak("$config_file: $@") if $@;
            Carp::croak("$config_file: $!") unless defined $config;
            unless ( ref($config) eq 'HASH' ) {
                Carp::croak("$config_file does not return HashRef.");
            }
            no warnings 'redefine';
            no warnings 'once';
            *Omnis::Agent::load_config = sub { $config }
        }

        infof("Omnis::Agent: http://${host}:${port}/");

        my $loader = Plack::Loader->load(
            'Starlet',
            port        => $port,
            host        => $host,
            max_workers => $opt->{'max-workers'},
        );
        return $loader->run($app);
#    }
    return $app;
}

__END__

=encoding utf-8

=head1 NAME

B<program_name> - abstract

=head1 SYNOPSIS

B<program_name>
file
[B<-r> arg]
[B<-e> days]
[B<-n>]
[B<-l> limit]
[B<-u> clock_time]
[B<-d> | B<--debug>]

B<program_name> B<-h> | B<--help> | B<-?>

  $ program_name file > out

=head1 DESCRIPTION

このプログラムは...

=head1 OPTIONS

=over 4

=item B<-r> arg, B<--require> arg

=item B<-e> days, B<--expire> days

=item B<-n>, B<--dry-run>

=item B<-d>, B<--debug>

increase debug level.
-d -d more verbosely.

=back

=head1 EXIT STATUS

exit status.

=head1 RETURN VALUE

What the program or function returns, if successful. This section can
be omitted for programs whose precise exit codes aren't important,
provided they return 0 on success as is standard.  It should always be
present for functions.

=head1 ERRORS

errors.

=head1 DIAGNOSTICS

All possible messages the program can print out--and what they mean.
You may wish to follow the same documentation style as the Perl
documentation; see perldiag(1) for more details (and look at the POD
source as well).

=head1 EXAMPLES

=head2 ex1

ext1...

=head1 ENVIRONMENT

=over 6

=item HOME

Used to determine the user's home directory.

=back

=head1 FUNCTIONS

=over 4

=item B<f1>($a,$b)

call from:
call out :
in :
out:

desc.

=back

=head1 FILES

=over 4

=item F</path/to/config.ph>

設定ファイル。

=back

=head1 CAVEATS

Things to take special care with, sometimes called WARNINGS.

=head1 BUGS

Things that are broken or just don't work quite right.

=head1 RESTRICTIONS

Bugs you don't plan to fix.  :-)

=head1 NOTES

Miscellaneous commentary.

=head1 SEE ALSO

L<Module::Hoge|Module::Hoge>,
ls(1), cd(1)

=head1 AUTHOR

HIROSE, Masaaki E<lt>hirose31 _at_ gmail.comE<gt>

=head1 LICENSE

This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.

=cut

# for Emacsen
# Local Variables:
# mode: cperl
# cperl-indent-level: 4
# cperl-close-paren-offset: -4
# cperl-indent-parens-as-block: t
# indent-tabs-mode: nil
# coding: utf-8
# End:

# vi: set ts=4 sw=4 sts=0 et ft=perl fenc=utf-8 :
